"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAPI = exports.minApp = exports.minAPI = exports.containerSettings = void 0;
const aws_codebuild_1 = require("aws-cdk-lib/aws-codebuild");
exports.containerSettings = {
    ["AWSPROFILE"]: { value: "Dev", type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT },
    ["AWSREGION"]: { value: "eu-west-2", type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT },
    ["PGDATABASE"]: { value: "gis.ID.eu-west-2.rds.amazonaws.com", type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT },
    ["PGPORT"]: { value: "5432", type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT },
    ["dockerhub_username"]: { value: "dockerhub:username", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["dockerhub_password"]: { value: "dockerhub:password", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["JWT_SECRET"]: { value: "jwt:secret", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["JWT_SECRETKEY"]: { value: "jwt:secretkey", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["POSTGRES_UN"]: { value: "postgres:username", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["POSTGRES_PW"]: { value: "postgres:password", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
};
exports.minAPI = ["AWSPROFILE", "AWSREGION", "API_NAME", "PGDATABASE", "PGPORT", "JWT_SECRET", "JWT_SECRETKEY", "POSTGRES_UN", "POSTGRES_PW", "AWS_SECRETID", "AWS_SECRETKEY"];
exports.minApp = ["AWSPROFILE", "AWSREGION"];
function addAPI(obj, apiname, others) {
    const newobj = Object.assign({}, obj);
    newobj.API_NAME = { value: apiname, type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT };
    if (others) {
        others.forEach((pair) => {
            newobj[pair.key] = { value: pair.value, type: pair.type };
        });
    }
    return newobj;
}
exports.addAPI = addAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRFbnYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJidWlsZEVudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2REFBeUU7QUFFNUQsUUFBQSxpQkFBaUIsR0FBRztJQUMvQixDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsNENBQTRCLENBQUMsU0FBUyxFQUFFO0lBQzlFLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxTQUFTLEVBQUU7SUFDbkYsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxvQ0FBb0MsRUFBRSxJQUFJLEVBQUUsNENBQTRCLENBQUMsU0FBUyxFQUFFO0lBQzdHLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxTQUFTLEVBQUU7SUFDM0UsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxlQUFlLEVBQUU7SUFDM0csQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxlQUFlLEVBQUU7SUFDM0csQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLDRDQUE0QixDQUFDLGVBQWUsRUFBRTtJQUMzRixDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsNENBQTRCLENBQUMsZUFBZSxFQUFFO0lBQ2pHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLDRDQUE0QixDQUFDLGVBQWUsRUFBRTtJQUNuRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxlQUFlLEVBQUU7Q0FDcEcsQ0FBQztBQUVXLFFBQUEsTUFBTSxHQUFHLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3ZLLFFBQUEsTUFBTSxHQUFHLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBRWxELFNBQWdCLE1BQU0sQ0FBQyxHQUFRLEVBQUUsT0FBZSxFQUFFLE1BQTZFO0lBQzdILE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuRixJQUFJLE1BQU0sRUFBRTtRQUNWLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM1RCxDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVRELHdCQVNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY29kZWJ1aWxkXCI7XHJcblxyXG5leHBvcnQgY29uc3QgY29udGFpbmVyU2V0dGluZ3MgPSB7XHJcbiAgW1wiQVdTUFJPRklMRVwiXTogeyB2YWx1ZTogXCJEZXZcIiwgdHlwZTogQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5QTEFJTlRFWFQgfSxcclxuICBbXCJBV1NSRUdJT05cIl06IHsgdmFsdWU6IFwiZXUtd2VzdC0yXCIsIHR5cGU6IEJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUuUExBSU5URVhUIH0sXHJcbiAgW1wiUEdEQVRBQkFTRVwiXTogeyB2YWx1ZTogXCJnaXMuSUQuZXUtd2VzdC0yLnJkcy5hbWF6b25hd3MuY29tXCIsIHR5cGU6IEJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUuUExBSU5URVhUIH0sIC8vVE9ETzogc2V0L2dldCBmcm9tIHBhcmFtIHN0b3JlXHJcbiAgW1wiUEdQT1JUXCJdOiB7IHZhbHVlOiBcIjU0MzJcIiwgdHlwZTogQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5QTEFJTlRFWFQgfSxcclxuICBbXCJkb2NrZXJodWJfdXNlcm5hbWVcIl06IHsgdmFsdWU6IFwiZG9ja2VyaHViOnVzZXJuYW1lXCIsIHR5cGU6IEJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUuU0VDUkVUU19NQU5BR0VSIH0sXHJcbiAgW1wiZG9ja2VyaHViX3Bhc3N3b3JkXCJdOiB7IHZhbHVlOiBcImRvY2tlcmh1YjpwYXNzd29yZFwiLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlNFQ1JFVFNfTUFOQUdFUiB9LFxyXG4gIFtcIkpXVF9TRUNSRVRcIl06IHsgdmFsdWU6IFwiand0OnNlY3JldFwiLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlNFQ1JFVFNfTUFOQUdFUiB9LFxyXG4gIFtcIkpXVF9TRUNSRVRLRVlcIl06IHsgdmFsdWU6IFwiand0OnNlY3JldGtleVwiLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlNFQ1JFVFNfTUFOQUdFUiB9LFxyXG4gIFtcIlBPU1RHUkVTX1VOXCJdOiB7IHZhbHVlOiBcInBvc3RncmVzOnVzZXJuYW1lXCIsIHR5cGU6IEJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUuU0VDUkVUU19NQU5BR0VSIH0sXHJcbiAgW1wiUE9TVEdSRVNfUFdcIl06IHsgdmFsdWU6IFwicG9zdGdyZXM6cGFzc3dvcmRcIiwgdHlwZTogQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5TRUNSRVRTX01BTkFHRVIgfSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtaW5BUEkgPSBbXCJBV1NQUk9GSUxFXCIsIFwiQVdTUkVHSU9OXCIsIFwiQVBJX05BTUVcIiwgXCJQR0RBVEFCQVNFXCIsIFwiUEdQT1JUXCIsIFwiSldUX1NFQ1JFVFwiLCBcIkpXVF9TRUNSRVRLRVlcIiwgXCJQT1NUR1JFU19VTlwiLCBcIlBPU1RHUkVTX1BXXCIsIFwiQVdTX1NFQ1JFVElEXCIsIFwiQVdTX1NFQ1JFVEtFWVwiXTtcclxuZXhwb3J0IGNvbnN0IG1pbkFwcCA9IFtcIkFXU1BST0ZJTEVcIiwgXCJBV1NSRUdJT05cIl07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkQVBJKG9iajogYW55LCBhcGluYW1lOiBzdHJpbmcsIG90aGVycz86IHsga2V5OiBzdHJpbmc7IHZhbHVlOiBzdHJpbmc7IHR5cGU6IEJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUgfVtdKSB7XHJcbiAgY29uc3QgbmV3b2JqID0gT2JqZWN0LmFzc2lnbih7fSwgb2JqKTtcclxuICBuZXdvYmouQVBJX05BTUUgPSB7IHZhbHVlOiBhcGluYW1lLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlBMQUlOVEVYVCB9O1xyXG4gIGlmIChvdGhlcnMpIHtcclxuICAgIG90aGVycy5mb3JFYWNoKChwYWlyKSA9PiB7XHJcbiAgICAgIG5ld29ialtwYWlyLmtleV0gPSB7IHZhbHVlOiBwYWlyLnZhbHVlLCB0eXBlOiBwYWlyLnR5cGUgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gbmV3b2JqO1xyXG59XHJcbiJdfQ==