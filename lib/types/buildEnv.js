"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAPI = exports.minApp = exports.minAPI = exports.containerSettings = void 0;
const aws_codebuild_1 = require("aws-cdk-lib/aws-codebuild");
exports.containerSettings = {
    ["AWSPROFILE"]: { value: "Dev", type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT },
    ["AWSREGION"]: { value: "eu-west-2", type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT },
    ["PGDATABASE"]: { value: "RDS_DB_ENDPOINT", type: aws_codebuild_1.BuildEnvironmentVariableType.PARAMETER_STORE },
    ["PGPORT"]: { value: "5432", type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT },
    ["dockerhub_username"]: { value: "dockerhub:username", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["dockerhub_password"]: { value: "dockerhub:password", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["JWT_SECRET"]: { value: "jwt:secret", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["JWT_SECRETKEY"]: { value: "jwt:secretkey", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["POSTGRES_UN"]: { value: "postgres:username", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["POSTGRES_PW"]: { value: "postgres:password", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["AWS_SECRETID"]: { value: "awsdev:secretid", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
    ["AWS_SECRETKEY"]: { value: "awsdev:secretkey", type: aws_codebuild_1.BuildEnvironmentVariableType.SECRETS_MANAGER },
};
exports.minAPI = ["AWSPROFILE", "AWSREGION", "API_NAME", "PGDATABASE", "PGPORT", "JWT_SECRET", "JWT_SECRETKEY", "POSTGRES_UN", "POSTGRES_PW", "AWS_SECRETID", "AWS_SECRETKEY"];
exports.minApp = ["AWSPROFILE", "AWSREGION"];
function addAPI(obj, apiname, others) {
    const newobj = Object.assign({}, obj);
    newobj.API_NAME = { value: apiname, type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT };
    if (others) {
        others.forEach((pair) => {
            newobj[pair.key] = { value: pair.value, type: pair.type };
        });
    }
    return newobj;
}
exports.addAPI = addAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRFbnYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJidWlsZEVudi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2REFBeUU7QUFFNUQsUUFBQSxpQkFBaUIsR0FBRztJQUMvQixDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsNENBQTRCLENBQUMsU0FBUyxFQUFFO0lBQzlFLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxTQUFTLEVBQUU7SUFDbkYsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsNENBQTRCLENBQUMsZUFBZSxFQUFFO0lBQ2hHLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxTQUFTLEVBQUU7SUFDM0UsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxlQUFlLEVBQUU7SUFDM0csQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxlQUFlLEVBQUU7SUFDM0csQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLDRDQUE0QixDQUFDLGVBQWUsRUFBRTtJQUMzRixDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsNENBQTRCLENBQUMsZUFBZSxFQUFFO0lBQ2pHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLDRDQUE0QixDQUFDLGVBQWUsRUFBRTtJQUNuRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSw0Q0FBNEIsQ0FBQyxlQUFlLEVBQUU7SUFDbkcsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsNENBQTRCLENBQUMsZUFBZSxFQUFFO0lBQ2xHLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLDRDQUE0QixDQUFDLGVBQWUsRUFBRTtDQUNyRyxDQUFDO0FBRVcsUUFBQSxNQUFNLEdBQUcsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDdkssUUFBQSxNQUFNLEdBQUcsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFFbEQsU0FBZ0IsTUFBTSxDQUFDLEdBQVEsRUFBRSxPQUFlLEVBQUUsTUFBNkU7SUFDN0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEMsTUFBTSxDQUFDLFFBQVEsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLDRDQUE0QixDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ25GLElBQUksTUFBTSxFQUFFO1FBQ1YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBVEQsd0JBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jb2RlYnVpbGRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjb250YWluZXJTZXR0aW5ncyA9IHtcclxuICBbXCJBV1NQUk9GSUxFXCJdOiB7IHZhbHVlOiBcIkRldlwiLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlBMQUlOVEVYVCB9LFxyXG4gIFtcIkFXU1JFR0lPTlwiXTogeyB2YWx1ZTogXCJldS13ZXN0LTJcIiwgdHlwZTogQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5QTEFJTlRFWFQgfSxcclxuICBbXCJQR0RBVEFCQVNFXCJdOiB7IHZhbHVlOiBcIlJEU19EQl9FTkRQT0lOVFwiLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlBBUkFNRVRFUl9TVE9SRSB9LFxyXG4gIFtcIlBHUE9SVFwiXTogeyB2YWx1ZTogXCI1NDMyXCIsIHR5cGU6IEJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUuUExBSU5URVhUIH0sXHJcbiAgW1wiZG9ja2VyaHViX3VzZXJuYW1lXCJdOiB7IHZhbHVlOiBcImRvY2tlcmh1Yjp1c2VybmFtZVwiLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlNFQ1JFVFNfTUFOQUdFUiB9LFxyXG4gIFtcImRvY2tlcmh1Yl9wYXNzd29yZFwiXTogeyB2YWx1ZTogXCJkb2NrZXJodWI6cGFzc3dvcmRcIiwgdHlwZTogQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5TRUNSRVRTX01BTkFHRVIgfSxcclxuICBbXCJKV1RfU0VDUkVUXCJdOiB7IHZhbHVlOiBcImp3dDpzZWNyZXRcIiwgdHlwZTogQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5TRUNSRVRTX01BTkFHRVIgfSxcclxuICBbXCJKV1RfU0VDUkVUS0VZXCJdOiB7IHZhbHVlOiBcImp3dDpzZWNyZXRrZXlcIiwgdHlwZTogQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZS5TRUNSRVRTX01BTkFHRVIgfSxcclxuICBbXCJQT1NUR1JFU19VTlwiXTogeyB2YWx1ZTogXCJwb3N0Z3Jlczp1c2VybmFtZVwiLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlNFQ1JFVFNfTUFOQUdFUiB9LFxyXG4gIFtcIlBPU1RHUkVTX1BXXCJdOiB7IHZhbHVlOiBcInBvc3RncmVzOnBhc3N3b3JkXCIsIHR5cGU6IEJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUuU0VDUkVUU19NQU5BR0VSIH0sXHJcbiAgW1wiQVdTX1NFQ1JFVElEXCJdOiB7IHZhbHVlOiBcImF3c2RldjpzZWNyZXRpZFwiLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlNFQ1JFVFNfTUFOQUdFUiB9LFxyXG4gIFtcIkFXU19TRUNSRVRLRVlcIl06IHsgdmFsdWU6IFwiYXdzZGV2OnNlY3JldGtleVwiLCB0eXBlOiBCdWlsZEVudmlyb25tZW50VmFyaWFibGVUeXBlLlNFQ1JFVFNfTUFOQUdFUiB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG1pbkFQSSA9IFtcIkFXU1BST0ZJTEVcIiwgXCJBV1NSRUdJT05cIiwgXCJBUElfTkFNRVwiLCBcIlBHREFUQUJBU0VcIiwgXCJQR1BPUlRcIiwgXCJKV1RfU0VDUkVUXCIsIFwiSldUX1NFQ1JFVEtFWVwiLCBcIlBPU1RHUkVTX1VOXCIsIFwiUE9TVEdSRVNfUFdcIiwgXCJBV1NfU0VDUkVUSURcIiwgXCJBV1NfU0VDUkVUS0VZXCJdO1xyXG5leHBvcnQgY29uc3QgbWluQXBwID0gW1wiQVdTUFJPRklMRVwiLCBcIkFXU1JFR0lPTlwiXTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRBUEkob2JqOiBhbnksIGFwaW5hbWU6IHN0cmluZywgb3RoZXJzPzogeyBrZXk6IHN0cmluZzsgdmFsdWU6IHN0cmluZzsgdHlwZTogQnVpbGRFbnZpcm9ubWVudFZhcmlhYmxlVHlwZSB9W10pIHtcclxuICBjb25zdCBuZXdvYmogPSBPYmplY3QuYXNzaWduKHt9LCBvYmopO1xyXG4gIG5ld29iai5BUElfTkFNRSA9IHsgdmFsdWU6IGFwaW5hbWUsIHR5cGU6IEJ1aWxkRW52aXJvbm1lbnRWYXJpYWJsZVR5cGUuUExBSU5URVhUIH07XHJcbiAgaWYgKG90aGVycykge1xyXG4gICAgb3RoZXJzLmZvckVhY2goKHBhaXIpID0+IHtcclxuICAgICAgbmV3b2JqW3BhaXIua2V5XSA9IHsgdmFsdWU6IHBhaXIudmFsdWUsIHR5cGU6IHBhaXIudHlwZSB9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJldHVybiBuZXdvYmo7XHJcbn1cclxuIl19